Hexadecimal to decimal:
0x32 = (16 * 3d) + (2d) = 48d + 2d = 50d
(https://www.rapidtables.com/convert/number/decimal-to-hex.html)

NOT (or !)
NOT 1101 becomes
0010

AND (or &)
AND 1100
AND 1010
1000
(if both bits are 1 it returns 1 but otherwise it returns 0)

OR (or |)
OR 1100
OR 1101
1101
(If one or both of the bits is 1 it returns 1)

XOR (or ^)
XOR 1100
XOR 1010
0100
(If both are 1 return 0, if 1 is one return 1, if they are both zero return zero)

MOV (RAX, x) can be used to move varibles and registers into each other this is moving x into RAX

cmp (RAX, 4) compares stuff, minuses RAX-4 and returns 0 if the result is 0.

jne (5) jumps if the cmp was NOT 0, je jumps if it IS zero.

call (function) calls a function

jmp (5) jumps to a line

Registers:
    RAX - Known as the accumulator register. Often used to store the return value of a function.
    RBX - Sometimes known as the base register, not to be confused with the base pointer. Sometimes used as a base pointer for memory access.
    RDX - Sometimes known as the data register.
    RCX - Sometimes known as the counter register. Used as a loop counter.
    RSI - Known as the source index. Used as the source pointer in string operations.
    RDI - Known as the destination index. Used as the destination pointer in string operations.
    RSP - The stack pointer. Holds the address of the top of the stack.
    RBP - The base pointer. Holds the address of the base (bottom) of the stack.


Memory = memory address 

(Instruction/Opcode/Mnemonic) <Destination Operand>, <Source Operand>

lea is the same as mov except for addresses lea does not dereference.

push (register) pushes register on top of a stack

inc (register) adds 1 to a register

dec (register) subtracts 1 from a register (stores in first register)

add (register), (register) adds two registers (stores in first register)

mov RAX, 25
mov RBX, 5
mul RBX ; Multiplies RAX (25) with RBX (5)

mov RAX, 18
mov RBX, 3
div RBX ; Divides RAX (18) by RBX (3)

ret is like return

Status Flags
Here are the flags you should know. Note that when I say a "flag is set" I mean the flag is set to 1 which is true/on. 0 is false/off.
    Zero Flag (ZF) - Set if the result of an operation is zero. Not set if the result of an operation is not zero.
    Carry Flag (CF) - Set if the last unsigned arithmetic operation carried (addition) or borrowed (subtraction) a bit beyond the register. It's also set when an operation would be negative if it wasn't for the operation being unsigned.
    Overflow Flag (OF) - Set if a signed arithmetic operation is too big for the register to contain.
    Sign Flag (SF) - Set if the result of an operation is negative.
    Adjust/Auxiliary Flag (AF) - Same as the carry flag but for Binary Coded Decimal (BCD) operations.
    Parity Flag (PF) - Set to 1 if the number of bits set in the last 8 bits is even. (10110100, PF=1; 10110101, PF=0)
    Trap Flag (TF) - Allows for single-stepping of programs.

There are different segments/sections in which data or code is stored in memory. They are the following:
    Stack - Holds non-static local variables. Discussed more in-depth soon.
    Heap - Contains dynamically allocated data that can be uninitialized at first.
    .data - Contains global and static data initialized to a non-zero value.
    .bss - Contains global and static data that is uninitialized or initialized to zero.
    .text - Contains the code of the program (don't blame me for the name, I didn't make it).

IDA freeware notes:

View, subviews, and strings to find strings in asm.

edit, patch, change byte, to change asm bytes.
