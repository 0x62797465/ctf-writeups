SSTI:
For SSTI you can use diffrent payloads for diffrent servers, but sometimes it will through an error, in that case: craft your own payload! This can be based off someone elses, but the way I solved the second ssti lab was by modifying my payload until it was a RCE payload "user.name;import os;os.system('rm /home/carlos/morale.txt')}}" it threw an error the other times, and based off the debug I could make my own payload. 
Payloads: https://raw.githubusercontent.com/payloadbox/ssti-payloads/master/Intruder/ssti-payloads.txt
PortSwigger lab payloads: <%= File.open('/etc/passwd').read %>
<%= system("rm /home/carlos/morale.txt") %>
How to detect:
https://cdn.discordapp.com/attachments/967225820915597322/986724224209154068/unknown.png
 
--------------------------------
 
Directory traversal:
https://raw.githubusercontent.com/swisskyrepo/PayloadsAllTheThings/master/Directory%20Traversal/Intruder/directory_traversal.txt
Ways to exploit
1. https://example.com/yourpayload
so https://example.com/../../../etc/passwd
2. Use images
so edit html, go to the image, and you may see a directory instead of a url, you can replace that with ../../../etc/passwd, and save, than drag the image to your browser tabs so it becomes a link, and load the page, now with inspect element on the network tab, you can download the response image, and open it with notepad in order to find the file contents
3. Use parameters, so, https://www.example.com/image=coolpeople.png -->  https://www.example.com/image=../../../etc/passwd
 
--------------------------------

Open redirect:
Open redirect is useful for socially engineering the target to go to your site using there site as a trustworthy source. 
so google.com@scarywebsite.com would open scarywebsite.com
other ways to exploit: https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/open-redirect.md 
 
--------------------------------
 
Shellshock is a bug that is old as fuck and if you find a target vulnerable to it you can basically control the whole system, simple way to find out if they are vulnerable:
curl -H "User-Agent: () { :;}; echo vulnerable" http://example.com/
 
--------------------------------
 
RCE:
(remote code execution) is exploited by finding a vulnerable component of a web application, a great example of this is a ping tester, you input the ip and it pings it. This (on linux systems) is with the ping command. Now an application with no firewall or bad coding would allow you to input ;ls; as the ip, this would cause RCE, executing the command ls and outputting it if the application outputs the output of the ping (ip) command. This was demonstrated by DVWA (damn vulnerable web application). Now the target may have firewalls in case someone tries what we are trying. Adding junk can bypass this, so, "";''l""""s"":''. Other methods can be found at https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/rce.md.
Things:
&&
&
;
|
(try encoding btw)

--------------------------------
 
XML bugs/exploits:
Send these as requests (xxe):
https://raw.githubusercontent.com/EdOverflow/bugbounty-cheatsheet/master/cheatsheets/xxe.md
How I solved a XXE lab:
Put <!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]> inbetween <?xml version="1.0" encoding="UTF-8"?> and the original XML data (json). Put &xxe; in place of a original parameter. 

--------------------------------
 
Logic vulnerabilities:
This is more of a general vulnerability, when making a post request, if the website allows you to modify certain parameters, then you can use that to exploit something. Here is the portswigger example, when adding something to your cart, it sends a post request with the price, when editing and re-sending the request, you can modify the price to buy something for virtually nothing. 
 
--------------------------------

SQL injection:
Anyway, https://raw.githubusercontent.com/valdimirfp/PayloadsAllTheThings_/d484212de98d0d783c4b37ada30d3321686e5eaf/SQL%20Injection/Intruder/SQL-Injection use that with intruder. (Or use sqlmap)

-------------------------------

Information disclosiar:
This is more of a general vulnerbility. Error based: submiting str ("example") it perameters instead of int could lead to apache struts showing itself. As portswigger itself has stated, pay close attention to all errors when doing a pentest. You can find more error based vulners by using burp suite intruder, useful but slow. 
Debug: while debuging is useful, if stored on the server running the site, it could be located by hackers. Sometimes the devs put the debug file on the server on purpose, in that case it may be disclosed somewhere in the raw html text.
Backup: backup files may be stored on the server, find it with intruder ("get" request fuzzer) and maybe file inclusion.
Insecure config: using diffrent methods such as TRACE can lead to information disclosur. 
In conclusion: In conclusion information disclosiar can mostly be achieved by using a fuzzer (intruder). Other times it may be a certian parameter, sometimes it's just for directorys.

------------------------------

SSRF: 
This is kinda like a logic vulnerabilitie. Modifying a request to make the server access the localhost possibly bypassing the firewall. If the server is making its own request you can try this. 
Host your own web server for this, I would recomend trying ssrf on anything that has a url.

------------------------------

CSRF:
Well I have an understanding of the exploit, I can't seem to do it, so learn about it yourself. But when the victim visits your site, you can use javascript to send a request to the vulnerable website asking it to do something malicous, such as change the victims email to yours. 
Find examples online.

------------------------------

Clickjacking:
Click jacking is when the attacker website puts something over the original website in order to make you misclick. This can make the user do intresting things such as deleting there account or misinputing there account.

------------------------------

Web sockets:
These can be used for many attacks, such as XSS, sqli, SSRF, CSRF, clickjacking, SSTI, etc. And if someone is on the recieving end, XSS can actually hack the server. The X-Forwarded-For can make the server think you have another ip, this is also useful for fuzzing. 

------------------------------

Insecure deserialization:
This is complicated at first, but once you get the hang of it, it's very easy to exploit. So some cookies are encoded with base64, if you haven't heard of this, then you should stop reading. After decoding the base64 cookie, you can change the data, re-encode it, and send it. 
Update: this is more of a general exploit but uhh, read all the requests and decode everything.
------------------------------

Cache busting:
This is compliated. First test the exploit: put "X-Forwarded-Host: example.com" in the header (without the quotes). Look at the response, does the server try to get javascript from example.com? If yes, the target may be vulnerable. On your exploit server (hosted by you), in the path of the javascript requested, put a file with malicous javascript. Now use X-Forwarded-Host: with your server. Repeatidly send this request (1 every 10 seconds). And add a cache buster half the time (like /?cb=123 instead of /). Go to the website now, does the javascript execute? If yes, the website is vulnerable and anyone else visiting the website will also get a taste of your malicous javascript. This also works with other headers Host: X-Host: X-Forwarded-Server: X-HTTP-Host-Override: Forwarded: (EOL)
Note: Use burp suite peram miner in order to find vulnerable headers (may not fuzz host header)

------------------------------

Host header attacks:
If a website has Host: in its header, it may be vulnerable. Try changing the host, and using it for cache busting or ssrf. Bypasses for a system that seems like it isn't vulnerable are at the end of cache busting. Also adding another host: or adding one with spaces, at the begining or end.
Also use peram miner to find intresting shit.
Also use the damn ffuf wordlist.

------------------------------

Bypass 403:
I found this on one of burp suites pro extensions:
Turn: https://www.example.com/api/v1/users
Into:
https://www.example.com..;/api/v1/users
https://www.example.com/api..;/v1/users
https://www.example.com/api/v1..;/users
https://www.example.com/..;api/v1/users
https://www.example.com/api/..;v1/users
https://www.example.com/api/v1/..;users
https://www.example.com/api/v1/users/..;
https://www.example.com/api/v1/users/..;/
Besides ..; you can use https://raw.githubusercontent.com/Gilzy/403Bypasser/main/query%20payloads.txt these

------------------------------

Possible WAF ip ban evasion payloads (for headers): https://raw.githubusercontent.com/Gilzy/403Bypasser/main/header%20payloads.txt

------------------------------

Other things:
Use ffuf, host header injection, anything with perams, ffuf is a go to. Intruder is slow but stealthy.
Try toying with file extensions if you can upload anything.
Try finding the api, and looking through all requests that interact with it (and use ffuf to brute force possible methods of attack).
Try revisting the register page after signing up.
Try signing up with a company email.
Try spoofing headers.
Google dorks all the things (filetype, inurl, -text, site).
%00 can bypass some stuff, so can ?, .., ;, ..;, etc.
Host header injection with a reset email request could possibly lead to your domain getting the reset password info. 
Check for csrf tokens.
Unicode all the things.
Brute force all the headers (search for them).
Brute force all the perams (search for them).
Compare premium and free, see if free can access things premium can. But I'm broke so ignore this.
Search stack overflow, github, and pastebin.ga for anything relating to the website.
WayBackMachine all the things (robots.txt).
Brute force dirs, many lairs, plus perams.
Try all types of requests for all types of payloads, this can lead to things being vulnerable that wern't before.
Check a webserver (and branching js files) for any changes. You can potentially find unreleased stuff + more bugs.
IDOR, a small bug, logging things, or doing things, counting up (https://badsite.com/download/1.txt, 2.txt, etc instead of 31283.txt, 2371.txt, etc). Also weak randomnes can have the same effect. 
Use your own site that redirects to localhost to bypass ssrf localhost scanners.
Change trues to falses and so on.
Look at websocket!
